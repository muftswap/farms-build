{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/Tags.tsx","utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","PC","theme","mediaQueries","sm","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","NoFeeTag","variant","outline","startIcon","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","justifyContent","alignItems","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","mb","style","width","Action","ActionU","Left","Right","CardActions","farm","ethereum","list","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","renderApprovalOrStakeButton","mt","fullWidth","UnlockButton","textTransform","fontSize","pr","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","lpLabel","apy","liquidityUrlPathParts","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","href","ApyButton","onPresentApyModal","ml","Mobile","WrapperU","StyledLinkExternal","LinkExternal","text","Box","NoFee","MultiplierTag","Tag","Margin","DetailsSection","card","setList","setCard","bscScanAddress","removed","totalValueFormated","multiplier","depositFee","farmAPY","undefined","minimumFractionDigits","maximumFractionDigits","external","marginTop","display","height","CardActionsContainer","Flex","CardHeading","farmImage","risk","tokenSymbol","swap","tokenMode","log","src","alt","flexDirection","verticalAlign","RainbowLight","keyframes","StyledCardAccent","FCard","background","FCardU","Divider","borderColor","ExpandingWrapper","Desktop","BottomCard","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","userData","Icon","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","cursor","marginLeft","activeIndex","as","Link","to","textSubtle","Head","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/12.54869d40.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    // max-width: 100%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst PC = styled.div`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <PC>\n        <Text color=\"primary\" bold>\n          {expanded ? 'Hide' : 'Details'}\n        </Text>\n      </PC>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center' style={{width:\"100%\"}}>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {/* {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null} */}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nconst ActionU = styled.div`\n   flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.sm}{\n    display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  }\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  list?: any\n}\nconst Left = styled.div`\n  display: flex;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.sm}{\n  width: 48%;\n  margin-top: 0;\n  }\n  width: 70vw;\n  margin-top: 1rem;\n  border: 2px solid #FAC898;\n  border-radius: 1rem;\n  padding: 1rem;\n  align-items: flex-start;\n  justify-content: space-between;\n \n`;\n\nconst Right = styled.div`\n  display: flex;\n  flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.sm}{\n    width: 48%;\n    margin-top: 0;\n    }\n    width: 70vw;\n    margin-top: 1rem;\n  border: 2px solid #FAC898;\n  border-radius: 1rem;\n  padding: 1rem;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account,list }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  if (list) {\n\n    \n\n  return (\n    <ActionU>\n        <Left >\n          \n          <Text >\n            {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n            MSWAP\n          </Text>\n          <Text >\n            {TranslateString(999, 'Earned')}\n          </Text>\n          \n          <HarvestAction earnings={earnings} pid={pid} />\n      </Left>\n      \n      <Right >\n        {/* <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text> */}\n        <Text>Start Farming</Text>\n        {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n      </Right>\n      {/* <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          TODO: Is there a way to get a dynamic value here from useFarmFromSymbol?\n          King   \n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          { lpName  }\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()} */}\n    </ActionU>\n  )\n    }\n    return (\n      <Action>\n        <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          MSWAP \n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          { lpName  }\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()} \n      </Action>\n    )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            KING per $1000                 { /* TranslateString(999, 'EGG per $1000') */ }\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React,{ useState } from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { NoFeeTag } from 'components/Tags'\nimport { Text, Flex, Link, LinkExternal, BackgroundImage, Tag, Skeleton} from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\nimport { provider } from 'web3-core'\nimport { Farm } from 'state/types'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nconst Mobile = styled.div`\n    display: flex;\n  \n      width: 100%;\n      flex-direction: column;\n   \n    ${({ theme }) => theme.mediaQueries.sm}{\n      display: none;\n    }\n`;\nconst Left = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  width: 55%;\n}\nwidth:100%;`\n\nconst Right = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  width: 45%;\n}\nwidth: 100%;`\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  list?: any\n  card?: any\n  setList?: any\n  setCard?: any\n  cakePrice?: BigNumber\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\nconst WrapperU = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  flex-direction: row;\n  }\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  flex-direction: column-reverse;\n  \n  height: auto;\n  `\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\nconst Box = styled.div`\n  width: 75%;\n`;\n\nconst NoFee = styled.div`\n\n   display: flex;\n   flex-direction: column;\n   align-items: flex-start;\n   justify-content: space-between;\n`;\n\n\n\nconst MultiplierTag = styled(Tag)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Margin = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  margin-top: 0rem;\n}\n    margin-top: 0.5rem;   \n`;\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  list,\n  card,\n  setList,\n  setCard,\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  farm,\n  ethereum,\n  account,\n  multiplier,\n  depositFee,\n  cakePrice,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n\n\n\n  if(list){\n\n    const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n  \n\n  return (\n\n    <WrapperU>\n    <NoFee>\n\n     \n      <Margin>\n      <StyledLinkExternal href={\n        isTokenOnly ?\n          `https://exchange.goosedefi.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          :\n        `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\n      }>\n        {lpLabel}\n      </StyledLinkExternal>\n      </Margin>\n   \n   \n    <Margin>\n      <Link external href={bscScanAddress} bold={false}>\n        {TranslateString(356, 'View on BscScan')}\n      </Link>\n      </Margin>\n\n    <Margin>  \n    {depositFee === 0 ? <NoFeeTag /> : null}\n    </Margin>\n\n    <Mobile>\n    {!removed && (\n      <Flex style={{marginTop:\"0.5rem\"}} justifyContent=\"space-between\">\n        <Text>{TranslateString(352, 'APR')}</Text>\n        <Text bold style={{ display: 'flex' , alignItems:\"center\"}}>\n          {farm.apy ? (\n            <>\n              {farmAPY}%\n             \n              <ApyButton\n                lpLabel={lpLabel}\n                quoteTokenAdresses={quoteTokenAdresses}\n                quoteTokenSymbol={quoteTokenSymbol}\n                tokenAddresses={tokenAddresses}\n                cakePrice={cakePrice}\n                apy={farm.apy}\n              />\n             \n            </>\n          ) : (\n            <Skeleton height={24} width={80} />\n          )}\n        </Text>\n      </Flex>\n    )}\n    {!removed && (\n      <Flex  justifyContent=\"space-between\">\n        <Text>{TranslateString(23, 'Liquidity')}</Text>\n        <Text bold>{totalValueFormated}</Text>\n      </Flex>\n    )}\n  \n    <Flex style={{marginTop:\"0.5rem\"}} justifyContent=\"space-between\" >\n        <Text>Multiplier</Text>\n        <MultiplierTag >{multiplier}</MultiplierTag>\n      </Flex>\n    </Mobile>\n    </NoFee>\n    <Box>\n      <CardActionsContainer list={list} farm={farm} ethereum={ethereum} account={account} /> \n    </Box>\n  </WrapperU>\n   \n  )\n          }\n    \n          \n    return(\n      <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://exchange.goosedefi.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n    )  \n       \n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image, Text } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n  swap?:string\n  tokenMode?:boolean\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  swap,\n  tokenMode\n}) => {\n  console.log(swap)\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      {console.log(tokenMode,\"images\")}\n     <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={tokenMode ? 64 :95} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"center\" style={{verticalAlign:\"middle\"}}>\n        <Heading mb=\"4px\">{lpLabel}{ /* {lpLabel} */ }</Heading>  \n        <Flex justifyContent=\"center\">\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          {swap && <MultiplierTag variant=\"primary\">{swap}</MultiplierTag>}\n\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton, Tag, HelpIcon } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  // background: linear-gradient(45deg,\n  // rgba(255, 0, 0, 1) 0%,\n  // rgba(255, 154, 0, 1) 10%,\n  // rgba(208, 222, 33, 1) 20%,\n  // rgba(79, 220, 74, 1) 30%,\n  // rgba(63, 218, 216, 1) 40%,\n  // rgba(47, 201, 226, 1) 50%,\n  // rgba(28, 127, 238, 1) 60%,\n  // rgba(95, 21, 242, 1) 70%,\n  // rgba(186, 12, 248, 1) 80%,\n  // rgba(251, 7, 217, 1) 90%,\n  // rgba(255, 0, 0, 1) 100%);\n  // background-size: 300% 300%;\n  // animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 12px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 12px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  padding: 20px;\n  position: relative;\n  text-align: center;\n  margin-top: 1rem;\n`\nconst FCardU = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 16px;\n  display: flex;\n  // flex-direction: column;\n  justify-content: space-around;\n  padding: 1rem 0.5rem 1rem 0.5rem;\n  width: 100%;\n  position: relative;\n  text-align: center;\n  align-items: center;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n  &:hover {\n    background: ;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 24px;\n  }\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\nconst Button = styled.div`\n  ${({ theme }) => theme.mediaQueries.sm} {\n    position: absolute;\n    right: 0;\n    top: 2.5rem;\n  }\n  position: relative;\n`\n\nconst Desktop = styled.div`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: flex;\n    justify-content: space-between;\n    width: 15rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst BottomCard = styled(FCard)`\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;\n  padding: 1rem 2rem 1rem 2rem;\n  margin: 0 0 0;\n  &:hover {\n    background: #fff;\n  }\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n  setList?: any\n  setCard?: any\n  list?: any\n  card?: any\n  swap?: any\n  multiplier?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({\n  farm,\n  removed,\n  cakePrice,\n  bnbPrice,\n  ethereum,\n  account,\n  multiplier,\n  setList,\n  setCard,\n  list,\n  card,\n  swap,\n}) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.lpSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  // cakePrice?: BigNumber\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'MSWAP' // 'EGG'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  if (list) {\n    // console.log(list)\n\n    return (\n      <div>\n        <FCardU>\n          {farm.tokenSymbol === 'MSWAP' && <StyledCardAccent />}\n          <CardHeading\n            lpLabel={lpLabel}\n            multiplier={farm.multiplier}\n            risk={risk}\n            depositFee={farm.depositFeeBP}\n            farmImage={farmImage}\n            tokenSymbol={farm.tokenSymbol}\n          />\n          <Flex flexDirection=\"column\">\n            <Text>{TranslateString(318, 'Earn')}</Text>\n            <Text bold>{farm.userData && farm.userData.earnings ? farm.userData.earnings : '-'}</Text>{' '}\n            {/*  {  earnLabel }   */}\n          </Flex>\n          {!removed && (\n            <Flex alignItems=\"flex-start\" flexDirection=\"column\">\n              <Text>{TranslateString(352, 'APR')}</Text>\n              <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n                {farm.apy ? (\n                  <>\n                    {farmAPY}%\n                    <Desktop style={{ width: 'auto' }}>\n                      <ApyButton\n                        lpLabel={lpLabel}\n                        quoteTokenAdresses={quoteTokenAdresses}\n                        quoteTokenSymbol={quoteTokenSymbol}\n                        tokenAddresses={tokenAddresses}\n                        cakePrice={cakePrice}\n                        apy={farm.apy}\n                      />\n                    </Desktop>\n                  </>\n                ) : (\n                  <Skeleton height={24} width={80} />\n                )}\n              </Text>\n            </Flex>\n          )}\n          <Desktop>\n            {!removed && (\n              <Flex flexDirection=\"column\">\n                <Text>{TranslateString(23, 'Liquidity')}</Text>\n                <Text bold>{totalValueFormated}</Text>\n              </Flex>\n            )}\n            <HelpIcon />\n            <Flex flexDirection=\"column\">\n              <Text>Multiplier</Text>\n              <MultiplierTag>{multiplier}</MultiplierTag>\n            </Flex>\n          </Desktop>\n          {/* <Flex >\n          <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n          <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n        </Flex> */}\n          {/* <CardActionsContainer farm={farm} ethereum={ethereum} account={account} /> */}\n          {/* <Divider /> */}\n          <ExpandableSectionButton\n            onClick={() => setShowExpandableSection(!showExpandableSection)}\n            expanded={showExpandableSection}\n          />\n        </FCardU>\n        <ExpandingWrapper expanded={showExpandableSection}>\n          <BottomCard>\n            <DetailsSection\n              cakePrice={cakePrice}\n              multiplier={farm.multiplier}\n              farm={farm}\n              list={list}\n              ethereum={ethereum}\n              account={account}\n              depositFee={farm.depositFeeBP}\n              removed={removed}\n              isTokenOnly={farm.isTokenOnly}\n              bscScanAddress={\n                farm.isTokenOnly\n                  ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n                  : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              }\n              totalValueFormated={totalValueFormated}\n              lpLabel={lpLabel}\n              quoteTokenAdresses={quoteTokenAdresses}\n              quoteTokenSymbol={quoteTokenSymbol}\n              tokenAddresses={tokenAddresses}\n            />\n          </BottomCard>\n        </ExpandingWrapper>\n      </div>\n    )\n  }\n\n  return (\n    <FCard style={{ width: 'auto' }}>\n      {farm.tokenSymbol === 'EGG' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n        // swap={farm.swap}\n        tokenMode={farm.isTokenOnly}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          farm={farm}\n          list={list}\n          card={card}\n          setList={setList}\n          setCard={setCard}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle, ListViewIcon, CardViewIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst Icon = styled.div`\n\n  `;\n\ninterface Btn {\n  list?: any\n  card?: any\n  stakedOnly?: any\n  setStakedOnly?: any\n  setList?: any\n  setCard?: any\n}\n\nconst FarmTabButtons: React.FC<Btn> = ({ stakedOnly, setStakedOnly, list, card, setList, setCard }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text style={{color:\"#FFF\"}}> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <Icon>\n      <ListViewIcon width=\"2rem\" color=\"#FFF\" style={{cursor:\"pointer\"}} onClick={()=> {setList(true) ; setCard(false)} } />\n      <CardViewIcon width=\"2.2rem\" color=\"#FFF\" style={{marginLeft:\"1rem\",cursor:\"pointer\"}} onClick={()=>{ setCard(true);setList(false)} }/>\n      </Icon>\n\n      {/* <ToggleWrapper style={{ width: \"12rem\", display: \"flex\", justifyContent: \"space-between\" }}>\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n      </ToggleWrapper> */}\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" >\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {console.log(url)}\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n${({ theme }) => theme.mediaQueries.sm} {\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 32px;\n  width: 100%;\n  flex-direction: row;\n  height: auto;\n  margin: 8rem  0 0 0;\n}\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  height: 10rem;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 2rem 32px 2rem 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst Head = styled.div`\n  width: 100%;\n  position: absolute;\n  left: 0;\n  background: #FFF;\n  top:0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 3rem 0.2rem;\n`\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n  setList?: boolean\n  setCard?: boolean\n  list?: any\n  card?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const [ list, setList ] = useState(true)\n\n  const [ card, setCard ] = useState(true)\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n\n      \n\n      \n\n      return farmsToDisplayWithAPY.map((farm) => (\n        \n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          \n          ethereum={ethereum}\n          account={account}\n          setList={setList}\n          setCard={setCard}\n          list={list}\n          card={card}\n          multiplier={farm.multiplier}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum, list, card],\n  )\n\n\n\n  return (\n    <Page>\n      <Head>\n        <Heading as=\"h1\" size=\"lg\" color=\"#000\"  style={{ textAlign: 'center' }}>\n          {\n            tokenMode ?\n              TranslateString(10002, 'Stake tokens to earn ETC')\n              :\n            TranslateString(320, 'Stake LP tokens to earn ETC')\n          }\n        </Heading>\n      </Head>\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\n      </Heading> */}\n      <FarmTabButtons list={list} card={card} setList={setList} setCard={setCard} stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {console.log(path,\"path\")}\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}`}>      { /*  /history  */ }\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/W8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}