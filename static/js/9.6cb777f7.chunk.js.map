{"version":3,"sources":["hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","views/Home/images/sliderImg2.jpg","views/Home/images/sliderImg3.jpg","views/Home/components/SliderComponent.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwoCards.tsx","config/constants/particlesConfig.ts","views/Home/Home.tsx"],"names":["useTokenTotalSupply","address","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","methods","call","supply","BigNumber","fetchTotalSupply","useTokenBalance","tokenAddress","balance","setBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","fetchBalance","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","margin","styled","Card","Row","div","Container","Flex","Stats","CakeStats","useI18n","totalMUFTSupply","totalMSWAPSupply","farms","useFarms","MuftPrice","usePriceMuftBusd","MSWAPPrice","usePriceCakeBusd","MuftPerBlock","pow","toNumber","bold","padding","color","getBalanceNumber","SampleNextArrow","SliderComponent","slickSettings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","nextArrow","prevArrow","width","src","sliderImg1","alt","sliderImg2","sliderImg3","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","TranslateString","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","Block","Label","img","theme","colors","text","Actions","StatTitle","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getCakeAddress","reduce","accum","earning","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledTotalValueLockedCard","StyledContainer","TotalValueLockedCard","totalValue","useTotalValue","mswapMarketCap","setMSwapMarketingCap","muftMarketCap","setMuftMarketingCap","sup","marketingCap","times","console","log","size","mb","TwoCards","FarmStakingCard","particlesConfig","Hero","mediaQueries","sm","Image","BaseLayout","lg","ButtonContainer","Gallery","useStyles","makeStyles","particlesContainer","height","position","left","top","breakpoints","down","Home","classes","Page","overflowX","opacity","className","href","as","background","xmlns","viewBox","fill","d","border","justifyContent"],"mappings":"4ZA8CaA,EAAsB,SAACC,GAAa,IACvCC,EAAgBC,cAAhBD,YADsC,EAERE,qBAFQ,mBAEvCC,EAFuC,KAE1BC,EAF0B,KAc9C,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASV,GAD5C,SAEuBQ,EAAaG,QAAQP,cAAcQ,OAF1D,OAEQC,EAFR,OAGER,EAAe,IAAIS,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACd,EAAaD,IAEVI,GAoBMY,EAtES,SAACC,GAA0B,IAAD,EAClBd,mBAAS,IAAIW,IAAU,IADL,mBACzCI,EADyC,KAChCC,EADgC,OAEuBC,cAA/DC,EAFwC,EAExCA,QAASC,EAF+B,EAE/BA,SACTC,EAAgBrB,cAAhBqB,YAaR,OAXAjB,qBAAU,WAMJe,GAAWC,GALG,uCAAG,4BAAAf,EAAA,sEACDiB,YAAgBF,EAAUL,EAAcI,GADvC,OACbI,EADa,OAEnBN,EAAW,IAAIL,IAAUW,IAFN,2CAAH,oDAMhBC,KAED,CAACL,EAASC,EAAUL,EAAcM,IAE9BL,G,iBCSMS,EAxB6B,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAA0C,IAAhCC,gBAAgC,MAArB,OAAqB,EAAbC,EAAa,EAAbA,OAAa,EAClEC,qBAAW,CACrCC,MAAO,EACPC,IAAKN,EACLO,SAAU,EACVC,UAAW,IACXP,cAEeQ,IAAbR,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEU,EADsF,EACtFA,QAASC,EAD6E,EAC7EA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAjC,qBAAU,WACRkC,EAAYE,QAAQd,KACnB,CAACA,EAAOY,IAGT,eAAC,IAAD,CAAMG,MAAO,CAAEC,OAAQ,KAAOd,SAAUA,EAAxC,UACGC,EAAQO,M,0wCCnBSO,YAAOC,IAAPD,CAAH,KAArB,IAMME,EAAMF,IAAOG,IAAV,KAQIC,EAAYJ,YAAOK,IAAPL,CAAH,KAmBTM,EAAQN,YAAOK,IAAPL,CAAH,KA0DHO,EA7CG,WACQC,cAAxB,IACMC,EAAkBvD,EAAoB,8CACtCwD,EAAmBxD,EAAoB,8CACvCyD,EAAQC,cACRC,EAAYC,cACZC,EAAaC,cAOnB,OAJIL,GAASA,EAAM,IAAMA,EAAM,GAAGM,cACjB,IAAIhD,IAAU0C,EAAM,GAAGM,cAAcd,IAAI,IAAIlC,IAAU,IAAIiD,IAAI,KAAKC,WAKnF,eAACb,EAAD,WACE,eAACF,EAAD,WACE,eAACF,EAAD,WACE,eAAC,IAAD,CAAMjB,SAAS,SAASmC,MAAI,EAACtB,MAAO,CAAEC,OAAQ,IAAKsB,QAAS,KAA5D,UAAmE,sBAAMvB,MAAO,CAAEwB,MAAO,kBAAtB,mBAAnE,YACA,cAAC,EAAD,CAAWrC,SAAS,SAASF,MAAOgC,EAAWI,WAAYnC,SAAU,EAAGE,OAAO,SAEjF,eAACgB,EAAD,WACE,eAAC,IAAD,CAAMjB,SAAS,SAASmC,MAAI,EAACtB,MAAO,CAAEC,OAAQ,KAA9C,UAAqD,sBAAMD,MAAO,CAAEwB,MAAO,kBAAtB,mBAArD,mBACCZ,GAAoB,cAAC,EAAD,CAAWzB,SAAS,SAASF,MAAOwC,YAAiBb,GAAmB1B,SAAU,UAI3G,eAACoB,EAAD,WACE,eAACF,EAAD,WACE,eAAC,IAAD,CAAMjB,SAAS,SAASmC,MAAI,EAACtB,MAAO,CAAEC,OAAQ,IAAKsB,QAAS,KAA5D,UAAmE,sBAAMvB,MAAO,CAAEwB,MAAO,kBAAtB,kBAAnE,YACA,cAAC,EAAD,CAAWrC,SAAS,SAASF,MAAO8B,EAAUM,WAAYnC,SAAU,EAAGE,OAAO,SAEhF,eAACgB,EAAD,WACE,eAAC,IAAD,CAAMjB,SAAS,SAASmC,MAAI,EAACtB,MAAO,CAAEC,OAAQ,KAA9C,UAAqD,sBAAMD,MAAO,CAAEwB,MAAO,kBAAtB,kBAArD,mBACCb,GAAmB,cAAC,EAAD,CAAWxB,SAAS,SAASF,MAAOwC,YAAiBd,GAAkBzB,SAAU,c,+DC3FhG,MAA0B,uCCA1B,MAA0B,uCCSzC,SAASwC,IACL,OAAO,KAGX,IAuBeC,EAvBS,WACpB,IAAMC,EAAgB,CAClBC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,cAAe,IACfC,UAAW,cAACV,EAAD,IACXW,UAAW,cAACX,EAAD,KAEf,OACI,qBAAK1B,MAAO,CAAEsC,MAAO,QAArB,SACI,eAAC,IAAD,2BAAYV,GAAZ,cACI,qBAAKW,IAAKC,IAAYC,IAAI,YAC1B,qBAAKF,IAAKG,EAAYD,IAAI,YAC1B,qBAAKF,IAAKI,EAAYF,IAAI,mB,qCCW3BG,EA3Ba,WAAO,IAAD,EACkBpF,mBAA4B,IAD9C,mBACzBqF,EADyB,KACNC,EADM,KAExBpE,EAAYD,cAAZC,QACAE,EAAgBrB,cAAhBqB,YAqBR,OAnBAjB,qBAAU,WAcJe,GAbe,uCAAG,gCAAAd,EAAA,6DACdmF,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC7F,QAAS8F,cACTC,KAAM,eACNC,OAAQ,CAACH,EAAKI,IAAK5E,OAJD,SAOK6E,YAAUC,EAAeT,GAP9B,OAOdU,EAPc,OAQdC,EAAUV,IAAYC,KAAI,SAACC,EAAMS,GAAP,mBAAC,eAAsBT,GAAvB,IAA6B3E,QAAS,IAAIJ,IAAUsF,EAAWE,SAE/Fb,EAAqBY,GAVD,2CAAH,oDAcjBE,KAED,CAAClF,EAASE,IAENiE,G,WCfMgB,GAfY,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACrBC,EAAkBrD,cAGxB,OAFoBjC,cAAZC,QAUD,cAAC,EAAD,CAAWO,MAAO6E,EAAa3E,SAAS,SAN3C,cAAC,IAAD,CAAMqC,MAAM,eAAexB,MAAO,CAAEC,OAAO,KAA3C,SACG8D,EAAgB,IAAK,aCSfC,GAfW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrBF,EAAkBrD,cAGxB,OAFoBjC,cAAZC,QAUD,cAAC,EAAD,CAAWO,MAAOgF,EAAa9E,SAAS,SAN3C,cAAC,IAAD,CAAMqC,MAAM,eAAexB,MAAO,CAAEC,OAAO,KAA3C,SACG8D,EAAgB,IAAK,aCkBfG,GA1BQ,WAAO,IAAD,EACI1G,mBAAS,IADb,mBACpB2G,EADoB,KACV3F,EADU,KAEnBE,EAAiCD,cAAjCC,QACAE,EAAgBrB,cAAhBqB,YAoBR,OAlBAjB,qBAAU,WAaJe,GAZkB,uCAAG,8BAAAd,EAAA,6DACjBmF,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC7F,QAAS8F,cACTC,KAAM,eACNC,OAAQ,CAACH,EAAKI,IAAK5E,OAJE,SAOL6E,YAAUC,EAAeT,GAPpB,OAOjBjE,EAPiB,OASvBN,EAAWM,GATY,2CAAH,oDAapBsF,KAED,CAAC1F,EAASE,IAENuF,G,+8CCbqBjE,YAAOC,IAAPD,CAAH,MAA3B,IAOMmE,GAAQnE,IAAOG,IAAV,MAQLiE,IAJYpE,IAAOqE,IAAV,MAIDrE,IAAOG,IAAV,MACA,qBAAGmE,MAAkBC,OAAOC,SAIjCC,GAAUzE,IAAOG,IAAV,MAGPC,GAAYJ,YAAOK,IAAPL,CAAH,MAiBTE,GAAMF,IAAOG,IAAV,MAUHuE,GAAY1E,YAAOoE,GAAPpE,CAAH,MA8EA2E,GA1EW,WAAO,IAAD,EACIrH,oBAAS,GADb,mBACvBsH,EADuB,KACZC,EADY,KAEtBrG,EAAYD,cAAZC,QACFqF,EAAkBrD,cAClBsE,EAAmBpC,IACnBqB,EAAcxC,YAAiBpD,EAAgB4G,gBAC/ClE,EAAYG,cAAmBG,WAE/ByC,EADcI,KACYgB,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAIhH,IAAUiH,GAAS/E,IAAI,IAAIlC,IAAU,IAAIiD,IAAI,KAAKC,aACpE,GACGgE,EAAoBL,EAAiBM,QAAO,SAACC,GAAD,OAAiBA,EAAYhH,QAAQ8C,WAAa,KAE5FmE,EAAaC,YAAcJ,EAAkBpC,KAAI,SAACyC,GAAD,OAAqBA,EAAgBpC,QAAtFkC,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAAhI,EAAA,6DAClCmH,GAAa,GADqB,kBAG1BS,IAH0B,6EAOhCT,GAAa,GAPmB,0EASjC,CAACS,IAEJ,OAaE,cAZA,CAYC,GAAD,WACE,eAAC,GAAD,WACE,eAACnB,GAAD,WACE,eAACO,GAAD,WAAW,sBAAM5E,MAAO,CAAEwB,MAAO,WAAtB,mBAAX,iBACA,cAAC,GAAD,CAAoBsC,YAAaA,IACjC,eAACQ,GAAD,iBAAWvD,EAAY+C,GAAa+B,QAAQ,SAE9C,eAACxB,GAAD,WACE,eAACO,GAAD,WAAW,sBAAM5E,MAAO,CAAEwB,MAAO,WAAtB,mBAAX,gBACA,cAAC,GAAD,CAAmByC,YAAaA,IAChC,eAACK,GAAD,iBAAWvD,EAAYkD,GAAa4B,QAAQ,YAGhD,cAAClB,GAAD,UACGjG,EACC,cAAC,IAAD,CACEoH,GAAG,cACHC,SAAUV,EAAkBW,QAAU,GAAKlB,EAC3CmB,QAASN,EACTO,WAAS,EAJX,SAMGpB,EACGf,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsBsB,EAAkBW,OAAxC,QAGrB,cAACG,GAAA,EAAD,CAAcD,WAAS,U,0PC9HjC,IAAME,GAA6BlG,IAAOG,IAAV,MAK1BgG,GAAkBnG,YAAOI,EAAPJ,CAAH,MA4ENoG,GAvEc,WAC3B,IAAMvC,EAAkBrD,cAElB6F,EAAaC,cAEb7F,EAAkBvD,EAAoB,8CACtCwD,EAAmBxD,EAAoB,8CACvC2D,EAAYC,cACZC,EAAaC,cARc,EAUc1D,mBAAS,GAVvB,mBAU1BiJ,EAV0B,KAUVC,EAVU,OAWYlJ,mBAAS,GAXrB,mBAW1BmJ,EAX0B,KAWXC,EAXW,KAqCjC,OAvBAjJ,qBAAU,WACR,GAAIgD,GAAmBI,EAAW,CAChC,IAAM8F,EAAMlG,EAAgBU,WAAa,KACnCyF,EAAe/F,EAAUgG,MAAMF,GAAKxF,WAC1C2F,QAAQC,IAAI,kBAAmBH,GAC/BF,EAAoBE,MAGrB,CAACnG,EAAiBI,IAGrBpD,qBAAU,WACR,GAAIiD,GAAoBK,EAAY,CAClC,IAAM4F,EAAMjG,EAAiBS,WAAa,KAEpCyF,EAAe7F,EAAW8F,MAAMF,GAAKxF,WAC3CqF,EAAqBI,GAErBE,QAAQC,IAAI,aAAcH,MAG3B,CAAClG,EAAkBK,IAGpB,cAACmF,GAAD,UACE,gCAEE,eAACC,GAAD,WAEE,cAAC,IAAD,CAASa,KAAK,KAAKC,GAAG,OAAOnH,MAAO,CAAEC,OAAQ,KAA9C,SACG8D,EAAgB,IAAK,8BAGxB,cAAC,EAAD,CAAW9E,MAAOsH,EAAWlF,WAAYjC,OAAO,IAAIF,SAAU,OAMhE,eAACmH,GAAD,WACE,eAAC,IAAD,CAASa,KAAK,KAAKC,GAAG,OAAOnH,MAAO,CAAEC,OAAQ,KAA9C,UACE,sBAAMD,MAAO,CAAEwB,MAAO,YAAtB,mBADF,+BAGA,cAAC,EAAD,CAAWvC,MAAO0H,EAAevH,OAAO,IAAIF,SAAU,OAGxD,eAACmH,GAAD,WACE,eAAC,IAAD,CAASa,KAAK,KAAKC,GAAG,OAAOnH,MAAO,CAAEC,OAAQ,KAA9C,UACE,sBAAMD,MAAO,CAAEwB,MAAO,YAAtB,oBADF,+BAGA,cAAC,EAAD,CAAWvC,MAAOwH,EAAgBrH,OAAO,IAAIF,SAAU,a,0UC/EjE,IAAMsB,GAAQN,IAAOG,IAAV,MAqBI+G,GATE,WACb,OACI,eAAC,GAAD,WACI,cAAC,GAAD,IACA,cAACC,GAAD,QCqFGC,GA3GS,CACpB,UAAa,CACT,OAAU,CACN,MAAS,GACT,QAAW,CACP,QAAU,EACV,WAAc,MAGtB,MAAS,CACL,MAAS,WAEb,MAAS,CACL,KAAQ,QACR,OAAU,CACN,MAAS,EACT,MAAS,WAEb,QAAW,CACP,SAAY,GAEhB,MAAS,CACL,IAAO,qBACP,MAAS,IACT,OAAU,MAGlB,QAAW,CACP,MAAS,EACT,QAAU,EACV,KAAQ,CACJ,QAAU,EACV,MAAS,EACT,YAAe,GACf,MAAQ,IAGhB,KAAQ,CACJ,MAAS,GACT,QAAU,EACV,KAAQ,CACJ,QAAU,EACV,MAAS,GACT,SAAY,GACZ,MAAQ,IAGhB,YAAe,CACX,QAAU,EACV,SAAY,IACZ,MAAS,UACT,QAAW,GACX,MAAS,GAEb,KAAQ,CACJ,QAAU,EACV,MAAS,EACT,QAAU,EACV,UAAY,EACZ,QAAU,EACV,QAAW,CACP,QAAU,EACV,QAAW,IACX,QAAW,QAIvB,cAAiB,CACb,OAAU,CACN,QAAW,CACP,QAAU,EACV,KAAQ,WAEZ,QAAW,CACP,QAAU,EACV,KAAQ,QAEZ,QAAU,GAEd,MAAS,CACL,KAAQ,CACJ,SAAY,kBACZ,YAAe,CACX,QAAW,IAGnB,OAAU,CACN,SAAY,IACZ,KAAQ,GACR,SAAY,EACZ,QAAW,GAEf,QAAW,CACP,SAAY,IACZ,SAAY,IAEhB,KAAQ,CACJ,aAAgB,GAEpB,OAAU,CACN,aAAgB,KAI5B,eAAiB,G,k4ECjFrB,IAAMC,GAAOrH,IAAOG,IAAV,MAUN,qBAAGmE,MAAkBgD,aAAaC,MA8BhCC,IAvBQxH,YAAOyH,IAAPzH,CAAH,MAWJ,qBAAGsE,MAAkBgD,aAAaC,MAMlC,qBAAGjD,MAAkBgD,aAAaI,MAM3B1H,IAAOG,IAAV,OA6CLwH,IArCQ3H,IAAOG,IAAV,MAIWH,IAAOG,IAAV,MAWNH,IAAOG,IAAV,MAUOH,IAAOG,IAAV,MAYUH,YAAOK,IAAPL,CAAH,OAKf4H,GAAU5H,IAAOG,IAAV,MAaA0H,IAPD7H,IAAOG,IAAV,MAOgB2H,aAAW,SAACxD,GAAD,MAAY,CAC9CyD,mBAAmB,aACjB3F,MAAO,OACP4F,OAAQ,QACRC,SAAU,WACVC,KAAM,EACNC,IAAK,GACJ7D,EAAM8D,YAAYC,KAAK,MAAQ,CAC9BL,OAAQ,eA0DCM,GArDQ,WACG9H,cAAxB,IACM+H,EAAUV,KAEhB,OAEE,eAACW,EAAA,EAAD,CAAM1I,MAAO,CAAE2I,UAAW,UAA1B,UACE,qBAAK3I,MAAO,CAAE4I,QAAS,IAAvB,SACE,cAAC,IAAD,CAAWC,UAAWJ,EAAQR,mBAAoB5E,OAAQiE,OAE5D,cAACQ,GAAD,UACE,cAAC,EAAD,MAEF,eAACP,GAAD,WACE,cAACG,GAAD,UACE,qBAAKnF,IAAI,YAAYE,IAAI,GAAGzC,MAAO,CAAEsC,MAAO,OAAQ4F,OAAQ,YAE9D,cAAC,IAAD,CAAM/I,SAAS,SAASqC,MAAM,OAA9B,kEACA,eAACqG,GAAD,WACE,eAAC,IAAD,CACEiB,KAAK,SACLC,GAAG,IACH/I,MAAO,CAAEgJ,WAAY,iBAAkBd,OAAQ,SAAU3G,QAAS,SAAUtB,OAAQ,SAAUqC,MAAO,SAHvG,UAKE,qBAAK2G,MAAM,6BAA6B3G,MAAM,KAAK4F,OAAO,KAAKgB,QAAQ,YAAYC,KAAK,OAAxF,SACE,sBAAMC,EAAE,4sBAA4sBD,KAAK,YAE3tB,qBAAKnJ,MAAO,CAAEC,OAAQ,cARxB,gBAWA,qBAAKD,MAAO,CAAEC,OAAQ,YACtB,eAAC,IAAD,CACE6I,KAAK,SACLC,GAAG,IACH/I,MAAO,CAAEgJ,WAAY,cAAed,OAAQ,SAAU3G,QAAS,SAAU8H,OAAQ,oBAAqBpJ,OAAQ,SAAUqC,MAAO,SAHjI,UAKE,qBAAKtC,MAAO,CAAEC,OAAQ,cALxB,oBASF,cAAC,IAAD,CAAMd,SAAS,SAASqC,MAAM,OAA9B,gFAGF,cAAC,EAAD,IACA,cAAC,IAAD,CAAMxB,MAAO,CAAEsC,MAAO,QAAUgH,eAAe,SAA/C,SACE,cAAC,GAAD","file":"static/js/9.6cb777f7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useTokenTotalSupply = (address) => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, address)\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh, address])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text style={{ margin: \"0\" }} fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React, { useEffect } from 'react'\nimport { Card, CardBody, Heading, Text, Flex } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance, useTokenTotalSupply } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd, usePriceMuftBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n  font-size: 14px;\n  justify-content: space-between;\n`\nexport const Container = styled(Flex)` \n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  background-color: #FFF;\n  display: flex;\n  width: 31rem;\n  justify-content: space-around;\n  border-radius: 10px;\n  align-items: center;\n  padding: 1.7rem 1rem;\n  @media only screen and (max-width: 1100px) {\n    margin: 1rem 0 ;\n  }\n  @media only screen and (max-width: 768px) {\n    width: 99%;\n  }\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`\nexport const Stats = styled(Flex)`\n  width: 100%;\n  justify-content: space-evenly;\n  \n  @media only screen and (max-width: 1300px) {\n    justify-content: space-evenly;\n  }\n  @media only screen and (max-width: 1100px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalMUFTSupply = useTokenTotalSupply(\"0x1d4a26a9d980afc2287dca15eb896a26384bac7c\")\n  const totalMSWAPSupply = useTokenTotalSupply(\"0x9393d3C08956F245cdEE9ac9DD7214131Ae2bB8B\")\n  const farms = useFarms();\n  const MuftPrice = usePriceMuftBusd();\n  const MSWAPPrice = usePriceCakeBusd();\n  // const marketCap = MuftPrice.times(circSupply);\n  let MuftPerBlock = 0;\n  if (farms && farms[0] && farms[0].MuftPerBlock) {\n    MuftPerBlock = new BigNumber(farms[0].MuftPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n\n    <Stats>\n      <Container>\n        <Row>\n          <Text fontSize=\"1.3rem\" bold style={{ margin: \"0\", padding: \"0\" }}><span style={{ color: \"rgb(199, 1, 1)\" }}>MSWAP</span> Price</Text>\n          <CardValue fontSize=\"1.7rem\" value={MSWAPPrice.toNumber()} decimals={6} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"1.3rem\" bold style={{ margin: \"0\" }}><span style={{ color: \"rgb(199, 1, 1)\" }}>MSWAP</span> Total Supply</Text>\n          {totalMSWAPSupply && <CardValue fontSize=\"1.7rem\" value={getBalanceNumber(totalMSWAPSupply)} decimals={0} />}\n        </Row>\n      </Container>\n\n      <Container>\n        <Row>\n          <Text fontSize=\"1.3rem\" bold style={{ margin: \"0\", padding: \"0\" }}><span style={{ color: \"rgb(199, 1, 1)\" }}>MUFT</span> Price</Text>\n          <CardValue fontSize=\"1.7rem\" value={MuftPrice.toNumber()} decimals={8} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"1.3rem\" bold style={{ margin: \"0\" }}><span style={{ color: \"rgb(199, 1, 1)\" }}>MUFT</span> Total Supply</Text>\n          {totalMUFTSupply && <CardValue fontSize=\"1.7rem\" value={getBalanceNumber(totalMUFTSupply)} decimals={0} />}\n        </Row>\n      </Container>\n\n    </Stats>\n\n\n\n  )\n}\n\nexport default CakeStats\n","export default __webpack_public_path__ + \"static/media/sliderImg2.5c3d1815.jpg\";","export default __webpack_public_path__ + \"static/media/sliderImg3.92797b58.jpg\";","import React from 'react'\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport './dotStyle.css'\r\nimport sliderImg1 from '../images/sliderImg1.jpg'\r\nimport sliderImg2 from '../images/sliderImg2.jpg'\r\nimport sliderImg3 from '../images/sliderImg3.jpg'\r\n\r\nfunction SampleNextArrow() {\r\n    return null\r\n}\r\n\r\nconst SliderComponent = () => {\r\n    const slickSettings = {\r\n        dots: true,\r\n        infinite: true,\r\n        speed: 2000,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        autoplay: true,\r\n        autoplaySpeed: 4000,\r\n        nextArrow: <SampleNextArrow />,\r\n        prevArrow: <SampleNextArrow />\r\n    };\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <Slider {...slickSettings}>\r\n                <img src={sliderImg1} alt=\"slider1\" />\r\n                <img src={sliderImg2} alt=\"slider2\" />\r\n                <img src={sliderImg3} alt=\"slider3\" />\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SliderComponent\r\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMSWAP',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ margin:\"0\" }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} fontSize=\"24px\" />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ margin:\"0\" }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMSWAP',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, Flex } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { motion } from 'framer-motion'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/Muft/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 1.3rem;\n`\n\nconst Actions = styled.div`\n  // margin-top: 24px;\n`\nconst Container = styled(Flex)`\n  background-color: #FFF;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  padding:1.5rem 1rem;\n  width: 31rem;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  border-radius: 10px;\n  align-items: center;\n  margin-top: 1em;\n  @media only screen and (max-width: 768px) {\n    width: 99%;\n  }\n`\n\nconst Row = styled.div`\n   display: flex;\n   justify-content: space-around;\n   width: 100%;\n   @media only screen and (max-width: 500px) {\n    flex-direction: column;\n    align-items center;\n    \n   }\n`\nconst StatTitle = styled(Label)`\n  font-weight: bold;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const MuftPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    // <StyledFarmStakingCard>\n    //   <CardBody>\n    //     <Heading size=\"xl\" mb=\"24px\">\n    //       {TranslateString(542, 'Farms & Staking')}\n    //     </Heading>\n    //     <motion.div\n    //         animate={{ rotate: 360 }}\n    //         transition={{ ease: \"linear\", duration: 2.5, repeat: Infinity ,delay: 5}}\n\n    //    style={{width:\"4rem\"}} >\n    //       <CardImage src=\"/images/Muft/2.png\" alt=\"cake logo\" width={64} height={64} />\n    //     </motion.div>\n    <Container>\n      <Row>\n        <Block>\n          <StatTitle><span style={{ color: \"#C70101\" }}>MSWAP</span> to Harvest</StatTitle>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(MuftPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <StatTitle><span style={{ color: \"#C70101\" }}>MSWAP</span> in Wallet</StatTitle>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(MuftPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n      </Row>\n      <Actions>\n        {account ? (\n          <Button\n            id=\"harvest-all\"\n            disabled={balancesWithValue.length <= 0 || pendingTx}\n            onClick={harvestAllFarms}\n            fullWidth\n          >\n            {pendingTx\n              ? TranslateString(548, 'Collecting Muft')\n              : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n          </Button>\n        ) : (\n          <UnlockButton fullWidth />\n        )}\n      </Actions>\n    </Container>\n    //   </CardBody>\n    // </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useEffect, useState } from 'react'\nimport { useTotalSupply, useBurnedBalance, useTokenTotalSupply } from 'hooks/useTokenBalance'\nimport { useFarms, usePriceCakeBusd, usePriceMuftBusd, useTotalValue } from 'state/hooks'\n\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport CardValue from './CardValue'\nimport { Container } from './CakeStats'\n\nconst StyledTotalValueLockedCard = styled.div`\n  align-items: center;\n  display: flex;\n  padding: 0;\n`\nconst StyledContainer = styled(Container)`\n  flex-direction: column;\n  margin-top: 1em;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n  const totalMUFTSupply = useTokenTotalSupply(\"0x1d4a26a9d980afc2287dca15eb896a26384bac7c\")\n  const totalMSWAPSupply = useTokenTotalSupply(\"0x9393d3C08956F245cdEE9ac9DD7214131Ae2bB8B\")\n  const MuftPrice = usePriceMuftBusd();\n  const MSWAPPrice = usePriceCakeBusd();\n\n  const [mswapMarketCap, setMSwapMarketingCap] = useState(0);\n  const [muftMarketCap, setMuftMarketingCap] = useState(0);\n\n\n  useEffect(() => {\n    if (totalMUFTSupply && MuftPrice) {\n      const sup = totalMUFTSupply.toNumber() / 1e18;\n      const marketingCap = MuftPrice.times(sup).toNumber();\n      console.log(\"totalMUFTSupply\", marketingCap)\n      setMuftMarketingCap(marketingCap)\n\n    }\n  }, [totalMUFTSupply, MuftPrice])\n\n\n  useEffect(() => {\n    if (totalMSWAPSupply && MSWAPPrice) {\n      const sup = totalMSWAPSupply.toNumber() / 1e18;\n\n      const marketingCap = MSWAPPrice.times(sup).toNumber();\n      setMSwapMarketingCap(marketingCap)\n\n      console.log(\"mswapReply\", marketingCap)\n    }\n\n  }, [totalMSWAPSupply, MSWAPPrice])\n\n  return (\n    <StyledTotalValueLockedCard>\n      <div>\n\n        <StyledContainer>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          <Heading size=\"lg\" mb=\"24px\" style={{ margin: \"0\" }}>\n            {TranslateString(999, 'Total Value Locked (TVL)')}\n          </Heading>\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          {/* <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text> */}\n        </StyledContainer>\n\n\n        <StyledContainer>\n          <Heading size=\"lg\" mb=\"24px\" style={{ margin: \"0\" }}>\n            <span style={{ color: \"#C70101 \" }}> MUFT</span> Fully Diluted Market Cap\n          </Heading>\n          <CardValue value={muftMarketCap} prefix=\"$\" decimals={2} />\n        </StyledContainer>\n\n        <StyledContainer>\n          <Heading size=\"lg\" mb=\"24px\" style={{ margin: \"0\" }}>\n            <span style={{ color: \"#C70101 \" }}> MSWAP</span> Fully Diluted Market Cap\n          </Heading>\n          <CardValue value={mswapMarketCap} prefix=\"$\" decimals={2} />\n        </StyledContainer>\n      </div>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport styled from 'styled-components'\n// import Custom from './Custom'\nimport FarmStakingCard from './FarmStakingCard'\nimport TotalValueLockedCard from './TotalValueLockedCard'\n\nconst Stats = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-evenly !important;\n    margin: 2rem   0;\n    @media only screen and (max-width: 1100px) {\n        flex-direction: column;\n        align-items: center;\n        margin: 0.5rem   0;\n    }\n`\n\nconst TwoCards = () => {\n    return (\n        <Stats>\n            <TotalValueLockedCard />\n            <FarmStakingCard />\n        </Stats>\n    )\n}\n\nexport default TwoCards\n","const particlesConfig = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 30,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 530\r\n            }\r\n        },\r\n        \"color\": {\r\n            \"value\": \"#ffffff\"\r\n        },\r\n        \"shape\": {\r\n            \"type\": \"image\",\r\n            \"stroke\": {\r\n                \"width\": 0,\r\n                \"color\": \"#000000\"\r\n            },\r\n            \"polygon\": {\r\n                \"nb_sides\": 5\r\n            },\r\n            \"image\": {\r\n                \"src\": \"images/element.png\",\r\n                \"width\": 100,\r\n                \"height\": 100\r\n            }\r\n        },\r\n        \"opacity\": {\r\n            \"value\": 1,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 1,\r\n                \"opacity_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"size\": {\r\n            \"value\": 15,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 40,\r\n                \"size_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"line_linked\": {\r\n            \"enable\": true,\r\n            \"distance\": 150,\r\n            \"color\": \"#ffffff\",\r\n            \"opacity\": 0.4,\r\n            \"width\": 1\r\n        },\r\n        \"move\": {\r\n            \"enable\": true,\r\n            \"speed\": 1,\r\n            \"random\": false,\r\n            \"straight\": false,\r\n            \"bounce\": false,\r\n            \"attract\": {\r\n                \"enable\": false,\r\n                \"rotateX\": 600,\r\n                \"rotateY\": 1200\r\n            }\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": false,\r\n                \"mode\": \"repulse\"\r\n            },\r\n            \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n            },\r\n            \"resize\": true\r\n        },\r\n        \"modes\": {\r\n            \"grab\": {\r\n                \"distance\": 515.4845154845156,\r\n                \"line_linked\": {\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"bubble\": {\r\n                \"distance\": 400,\r\n                \"size\": 40,\r\n                \"duration\": 2,\r\n                \"opacity\": 8\r\n            },\r\n            \"repulse\": {\r\n                \"distance\": 200,\r\n                \"duration\": 0.4\r\n            },\r\n            \"push\": {\r\n                \"particles_nb\": 4\r\n            },\r\n            \"remove\": {\r\n                \"particles_nb\": 2\r\n            }\r\n        }\r\n    },\r\n    \"retina_detect\": true\r\n}\r\n\r\nexport default particlesConfig","import React from 'react'\nimport styled from 'styled-components'\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport AliceCarousel from 'react-alice-carousel';\nimport Particles from 'react-particles-js';\nimport { makeStyles } from '@material-ui/core/styles';\n// import ParticlesBg from 'particles-bg'\nimport { Heading, Text, BaseLayout, Button, Flex } from '@pancakeswap-libs/uikit'\nimport { motion } from 'framer-motion'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\n// import Title from 'views/Title/Title'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport SliderComponent from './components/SliderComponent'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport Custom from './components/Custom';\nimport CustomPage from './components/CustomPage';\nimport TwoCards from './components/TwoCards'\nimport particlesConfig from '../../config/constants/particlesConfig'\n\nconst Hero = styled.div`\n  align-items: center;\n  \n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: 10rem 0 2rem 0;\n \n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-image: url('/images/left.png'), url('/images/right.png');\n    padding-top: 0;\n    margin: 15rem 0 2rem 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n  width: 100%;\n\n  // & > div {\n  //   grid-column: span 6;\n  //   width: 100%;\n  // }\n\n  // ${({ theme }) => theme.mediaQueries.sm} {\n  //   & > div {\n  //     grid-column: span 8;\n  //   }\n  // }\n\n  // ${({ theme }) => theme.mediaQueries.lg} {\n  //   & > div {\n  //     grid-column: span 6;\n  //   }\n  // }\n`\nconst Image = styled.div`\n  height: 10rem;\n  width: 10rem;\n  margin: 3em 0;\n  @media only screen and (max-width: 768px) {\n    margin: -2em 0 3em;\n  }\n`\nconst Width = styled.div`\n  width: 90vw;\n  position: absolute;\n`\nconst IconContainer = styled.div`\n      width: 100%;\n    background-color: rgb(242, 242, 242);\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 9rem;\n    @media only screen and (max-width: 768px) {\n      min-width: 99%;\n     }\n`\nconst Icon = styled.div`\n  width: 4rem;\n  height: 4rem;\n  cursor: pointer;\n  @media only screen and (max-width: 768px) {\n    \n    width: 2rem;\n  height: 2rem;\n   }\n`\nconst RowStyle = styled.div`\n   width: 100%;\n  justify-content: space-evenly;\n   align-items: center;\n  @media only screen and (max-width: 1300px) {\n    justify-content: space-evenly;\n  }\n  @media only screen and (max-width: 1100px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`\nconst ButtonContainer = styled(Flex)`\n@media only screen and (max-width: 768px) {\n    flex-direction: column;\n }\n`\nconst Gallery = styled.div`\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n`\nconst Img = styled.div`\n  width: 100%;\n  height: 15rem;\n  @media only screen and (max-width: 768px) {\n    height: 10rem;\n }\n`\nexport const useStyles = makeStyles((theme) => ({\n  particlesContainer: {\n    width: '100%',\n    height: '150vh',\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    [theme.breakpoints.down('sm')]: {\n      height: '100vh',\n    },\n  },\n}));\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n  const classes = useStyles();\n\n  return (\n\n    <Page style={{ overflowX: \"hidden\" }} >\n      <div style={{ opacity: 0.5 }}>\n        <Particles className={classes.particlesContainer} params={particlesConfig} />\n      </div>\n      <Gallery>\n        <SliderComponent />\n      </Gallery>\n      <Hero>\n        <Image>\n          <img src=\"/logo.png\" alt=\"\" style={{ width: \"100%\", height: '100%' }} />\n        </Image>\n        <Text fontSize=\"2.2rem\" color=\"#FFF\">Dual-Governance DEX  +  Sport NFT Marketplace on BSC</Text>\n        <ButtonContainer>\n          <Button\n            href=\"/farms\"\n            as=\"a\"\n            style={{ background: \"rgb(199, 1, 1)\", height: \"3.7rem\", padding: \"0 3rem\", margin: \"1rem 0\", width: \"240px\" }}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M21 18V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H5C3.89 21 3 20.1 3 19V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V6H12C10.89 6 10 6.9 10 8V16C10 16.5304 10.2107 17.0391 10.5858 17.4142C10.9609 17.7893 11.4696 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.6022 13.5 15.2206 13.342 14.9393 13.0607C14.658 12.7794 14.5 12.3978 14.5 12C14.5 11.6022 14.658 11.2206 14.9393 10.9393C15.2206 10.658 15.6022 10.5 16 10.5C16.3978 10.5 16.7794 10.658 17.0607 10.9393C17.342 11.2206 17.5 11.6022 17.5 12C17.5 12.3978 17.342 12.7794 17.0607 13.0607C16.7794 13.342 16.3978 13.5 16 13.5Z\" fill=\"white\" />\n            </svg>\n            <div style={{ margin: \"0 0.5rem\" }} />\n            Earn MSWAP\n          </Button>\n          <div style={{ margin: \"0 1rem\" }} />\n          <Button\n            href=\"/pools\"\n            as=\"a\"\n            style={{ background: \"transparent\", height: \"3.7rem\", padding: \"0 3rem\", border: \"2px solid #FFFFFF\", margin: \"1rem 0\", width: \"240px\" }}\n          >\n            <div style={{ margin: \"0 0.5rem\" }} />\n            Stake MSWAP\n          </Button>\n        </ButtonContainer>\n        <Text fontSize=\"2.2rem\" color=\"#FFF\">MUFTSWAP introduces a more user-oriented Yield Farming Protocol</Text>\n      </Hero>\n\n      <CakeStats />\n      <Flex style={{ width: \"100%\" }} justifyContent=\"center\">\n        <TwoCards />\n      </Flex>\n\n    </Page>\n\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}